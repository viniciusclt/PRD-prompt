generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/prdprompt_clone/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  prds          PRD[]
  prompts       Prompt[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PRD {
  id          String   @id @default(cuid())
  title       String?
  appName     String?
  description String?  @db.Text
  industry    String?
  targetAudience String?
  complexity  String?
  content     String?  @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts     Prompt[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Prompt {
  id               String   @id @default(cuid())
  title           String?
  content         String   @db.Text
  type            String   @default("application") // "application" or "landing_page"
  technology      String?
  framework       String?
  specialRequirements String? @db.Text
  prdId           String?
  prd             PRD?     @relation(fields: [prdId], references: [id], onDelete: SetNull)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Idea {
  id          String   @id @default(cuid())
  title       String   @unique
  category    String
  level       String   // "Baixo", "Médio", "Avançado"
  description String   @db.Text
  tags        String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([level])
}

model Project {
  id          String   @id @default(cuid())
  title       String   @unique
  description String   @db.Text
  platform    String?  // "TRAE", "Supabase + TRAE", etc
  image       String?
  projectUrl  String?
  promptUsed  String?  @db.Text
  tags        String[] @default([])
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([featured])
}

model ColorPalette {
  id      String   @id @default(cuid())
  name    String   @unique
  colors  String[] // Array of hex colors
  category String?
}

model SuperPromptConfig {
  id                String   @id @default(cuid())
  projectType       String
  description       String   @db.Text
  visualStyle       String
  selectedPalette   String[] @default([])
  specialElements   String[] @default([])
  targetAudience    String?
  objectives        String?
  specificFeatures  String?  @db.Text
  includeHeroVideo  Boolean  @default(false)
  generatedPrompt   String?  @db.Text
  userId            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
